(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{640:function(s,e,t){"use strict";t.r(e);var a=t(20),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("PromQL的语法及使用")]),s._v(" "),t("h2",{attrs:{id:"_1、什么是promql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是promql"}},[s._v("#")]),s._v(" 1、什么是PromQL")]),s._v(" "),t("p",[s._v("Prometheus 通过指标名称（metrics name）以及对应的一组标签（label）唯一定义一条时间序列。指标名称反映了监控样本的基本标识，而 label 则在这个基本特征上为采集到的数据提供了多种特征维度。用户可以基于这些特征维度过滤、聚合、统计从而产生新的计算后的一条时间序列。")]),s._v(" "),t("p",[t("code",[s._v("PromQL")]),s._v(" 是 Prometheus 内置的数据查询语言，其提供对时间序列数据丰富的查询，聚合以及逻辑运算能力的支持。并且被广泛应用在 Prometheus 的日常应用当中，包括对数据查询、可视化、告警处理。可以这么说，"),t("code",[s._v("PromQL")]),s._v(" 是 Prometheus 所有应用场景的基础，理解和掌握 "),t("code",[s._v("PromQL")]),s._v(" 是我们使用 Prometheus 必备的技能。")]),s._v(" "),t("h2",{attrs:{id:"_2、时间序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、时间序列"}},[s._v("#")]),s._v(" 2、时间序列")]),s._v(" "),t("p",[s._v("前面我们通过 "),t("RouterLink",{attrs:{to:"/《Prometheus》学习笔记/pages/b5e11116/#_3、node-exporter"}},[s._v("node-exporter")]),s._v(" 暴露的 metrics 服务，Prometheus 可以采集到当前主机所有监控指标的样本数据。例如：")],1),s._v(" "),t("p",[t("code",[s._v("curl 127.0.0.1:9100/metrics |grep cpu")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# HELP node_cpu_seconds_total Seconds the cpus spent in each mode.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# TYPE node_cpu_seconds_total counter")]),s._v("\nnode_cpu_seconds_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("cpu"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),s._v(",mode"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"idle"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".62885731e+06\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# HELP node_load1 1m load average.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# TYPE node_load1 gauge")]),s._v("\nnode_load1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.29")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("其中非 "),t("code",[s._v("#")]),s._v(" 开头的每一行表示当前 node-exporter 采集到的一个监控样本：")]),s._v(" "),t("p",[t("code",[s._v("node_cpu_seconds_total")]),s._v(" 、 "),t("code",[s._v("node_load1")]),s._v(" 表明了当前指标的名称、大括号中的标签则反映了当前样本的一些特征和维度、浮点数则是该监控样本的具体值。")]),s._v(" "),t("p",[s._v("Prometheus 会将所有采集到的样本数据以时间序列的方式保存在"),t("strong",[s._v("内存数据库")]),s._v("中，并且定时保存到硬盘上。时间序列是按照时间戳和值的序列顺序存放的，我们称之为向量(vector)，每条时间序列通过指标名称(metrics name)和一组标签集(labelset)命名。如下所示，可以将时间序列理解为一个以时间为 X 轴的数字矩阵：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('  ^\n  │   . . . . . . . . . . . . . . . . .   . .   node_cpu_seconds_total{cpu="cpu0",mode="idle"}\n  │     . . . . . . . . . . . . . . . . . . .   node_cpu_seconds_total{cpu="cpu0",mode="system"}\n  │     . . . . . . . . . .   . . . . . . . .   node_load1{}\n  │     . . . . . . . . . . . . . . . .   . .  \n  v\n    <------------------ 时间 ----------------\x3e\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("在时间序列中的每一个点称为一个样本（sample），样本由以下三部分组成：")]),s._v(" "),t("ul",[t("li",[s._v("指标(metric)：metric name 和描述当前样本特征的 labelsets")]),s._v(" "),t("li",[s._v("时间戳(timestamp)：一个精确到毫秒的时间戳")]),s._v(" "),t("li",[s._v("样本值(value)： 一个 float64 的浮点型数据表示当前样本的值")])]),s._v(" "),t("p",[s._v("如下所示：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("--------------- metric ---------------------"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-timestamp -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-value-"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nhttp_request_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"200"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@1434417560938 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("94355")]),s._v("\nhttp_request_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"200"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@1434417561287 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("94334")]),s._v("\n\nhttp_request_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"404"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@1434417560938 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("38473")]),s._v("\nhttp_request_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"404"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@1434417561287 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("38544")]),s._v("\n\nhttp_request_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"200"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"POST"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@1434417560938 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4748")]),s._v("\nhttp_request_total"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"200"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"POST"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@1434417561287 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4785")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在形式上，所有的指标(Metric)都通过如下格式表示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<metric name>{<label name> = <label value>, ...}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("指标的名称(metric name)可以反映被监控样本的含义（比如，http_request_total - 表示当前系统接收到的 HTTP 请求总量）。指标名称只能由 ASCII 字符、数字、下划线以及冒号组成并必须符合正则表达式"),t("code",[s._v("[a-zA-Z_:][a-zA-Z0-9_:]*")]),s._v("。")]),s._v(" "),t("li",[s._v("标签(label)反映了当前样本的特征维度，通过这些维度 Prometheus 可以对样本数据进行过滤，聚合等。标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式 "),t("code",[s._v("[a-zA-Z_][a-zA-Z0-9_]*")]),s._v("。")])]),s._v(" "),t("p",[s._v("每个不同的 "),t("code",[s._v("metric_name")]),s._v("和 "),t("code",[s._v("label")]),s._v(" 组合都称为"),t("strong",[s._v("时间序列")]),s._v("，在 Prometheus 的表达式语言中，表达式或子表达式包括以下四种类型之一：")]),s._v(" "),t("ul",[t("li",[s._v("瞬时向量（Instant vector）：一组时间序列，每个时间序列包含单个样本，它们共享相同的时间戳。也就是说，表达式的返回值中只会包含该时间序列中的最新的一个样本值。而相应的这样的表达式称之为瞬时向量表达式。")]),s._v(" "),t("li",[s._v("区间向量（Range vector）：一组时间序列，每个时间序列包含一段时间范围内的样本数据，这些是通过将时间选择器附加到方括号中的瞬时向量（例如[5m]5分钟）而生成的。")]),s._v(" "),t("li",[s._v("标量（Scalar）：一个简单的数字浮点值。")]),s._v(" "),t("li",[s._v("字符串（String）：一个简单的字符串值。")])]),s._v(" "),t("p",[s._v("所有这些指标都是 Prometheus 定期从 metrics 接口那里采集过来的。采集的间隔时间的设置由 "),t("code",[s._v("prometheus.yaml")]),s._v(" 配置中的 "),t("code",[s._v("scrape_interval")]),s._v(" 指定。最多抓取间隔为30秒，这意味着至少每30秒就会有一个带有新时间戳记录的新数据点，这个值可能会更改，也可能不会更改，但是每隔 "),t("code",[s._v("scrape_interval")]),s._v(" 都会产生一个新的数据点。")]),s._v(" "),t("h2",{attrs:{id:"_3、指标类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、指标类型"}},[s._v("#")]),s._v(" 3、指标类型")]),s._v(" "),t("p",[s._v("从存储上来讲所有的监控指标 metric 都是相同的，但是在不同的场景下这些 metric 又有一些细微的差异。 例如，在 Node Exporter 返回的样本中指标 "),t("code",[s._v("node_load1")]),s._v(" 反应的是当前系统的负载状态，随着时间的变化这个指标返回的样本数据是在不断变化的。而指标 "),t("code",[s._v("node_cpu_seconds_total")]),s._v(" 所获取到的样本数据却不同，它是一个持续增大的值，因为其反应的是 CPU 的累计使用时间，从理论上讲只要系统不关机，这个值是会一直变大。")]),s._v(" "),t("p",[s._v("为了能够帮助用户理解和区分这些不同监控指标之间的差异，Prometheus 定义了4种不同的指标类型：Counter（计数器）、Gauge（仪表盘）、Histogram（直方图）、Summary（摘要）。")]),s._v(" "),t("p",[s._v("在 node-exporter 返回的样本数据中，其注释中也包含了该样本的类型。例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('# HELP node_cpu_seconds_total Seconds the cpus spent in each mode.\n# TYPE node_cpu_seconds_total counter\nnode_cpu_seconds_total{cpu="cpu0",mode="idle"} 362812.7890625\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_3-1、counter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、counter"}},[s._v("#")]),s._v(" 3.1、Counter")]),s._v(" "),t("p",[t("code",[s._v("Counter")]),s._v(" (只增不减的计数器) 类型的指标其工作方式和计数器一样，只增不减。常见的监控指标，如 "),t("code",[s._v("http_requests_total")]),s._v("、"),t("code",[s._v("node_cpu_seconds_total")]),s._v(" 都是 "),t("code",[s._v("Counter")]),s._v(" 类型的监控指标。")]),s._v(" "),t("p",[t("code",[s._v("Counter")]),s._v(" 是一个简单但又强大的工具，例如我们可以在应用程序中记录某些事件发生的次数，通过以时间序列的形式存储这些数据，我们可以轻松的了解该事件产生的速率变化。"),t("code",[s._v("PromQL")]),s._v(" 内置的聚合操作和函数可以让用户对这些数据进行进一步的分析，例如，通过 "),t("code",[s._v("rate()")]),s._v(" 函数获取 HTTP 请求量的增长率：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("rate(http_requests_total[5m])\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查询当前系统中，访问量前 10 的 HTTP 请求：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("topk(10, http_requests_total)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_3-2、gauge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、gauge"}},[s._v("#")]),s._v(" 3.2、Gauge")]),s._v(" "),t("p",[s._v("与 "),t("code",[s._v("Counter")]),s._v(" 不同，"),t("code",[s._v("Gauge")]),s._v("（可增可减的仪表盘）类型的指标侧重于反应系统的当前状态。因此这类指标的样本数据可增可减。常见指标如："),t("code",[s._v("node_memory_MemFree_bytes")]),s._v("（主机当前空闲的内存大小）、"),t("code",[s._v("node_memory_MemAvailable_bytes")]),s._v("（可用内存大小）都是 "),t("code",[s._v("Gauge")]),s._v(" 类型的监控指标。通过 "),t("code",[s._v("Gauge")]),s._v(" 指标，用户可以直接查看系统的当前状态：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("node_memory_MemFree_bytes\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("对于 "),t("code",[s._v("Gauge")]),s._v(" 类型的监控指标，通过 "),t("code",[s._v("PromQL")]),s._v(" 内置函数 "),t("code",[s._v("delta()")]),s._v(" 可以获取样本在一段时间范围内的变化情况。例如，计算 CPU 温度在两个小时内的差异：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('delta(cpu_temp_celsius{host="zeus"}[2h])\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("还可以直接使用 "),t("code",[s._v("predict_linear()")]),s._v(" 对数据的变化趋势进行预测。例如，预测系统磁盘空间在4个小时之后的剩余情况：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("predict_linear(node_filesystem_free_bytes[1h], 4 * 3600)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_3-3、histogram-和-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、histogram-和-summary"}},[s._v("#")]),s._v(" 3.3、Histogram 和 Summary")]),s._v(" "),t("p",[s._v("除了 "),t("code",[s._v("Counter")]),s._v(" 和 "),t("code",[s._v("Gauge")]),s._v(" 类型的监控指标以外，Prometheus 还定义了 "),t("code",[s._v("Histogram")]),s._v(" 和 "),t("code",[s._v("Summary")]),s._v(" 的指标类型。"),t("code",[s._v("Histogram")]),s._v(" 和 "),t("code",[s._v("Summary")]),s._v(" 主用用于统计和分析样本的分布情况。")]),s._v(" "),t("p",[s._v("在大多数情况下人们都倾向于使用某些量化指标的平均值，例如 CPU 的平均使用率、页面的平均响应时间，这种方式也有很明显的问题，以系统 API 调用的平均响应时间为例：如果大多数 API 请求都维持在 100ms 的响应时间范围内，而个别请求的响应时间需要 5s，那么就会导致某些 WEB 页面的响应时间落到"),t("strong",[s._v("中位数")]),s._v("上，而这种现象被称为"),t("strong",[s._v("长尾问题")]),s._v("。")]),s._v(" "),t("p",[s._v("为了区分是平均的慢还是长尾的慢，最简单的方式就是按照请求延迟的范围进行分组。例如，统计延迟在 0~10ms 之间的请求数有多少而 10~20ms 之间的请求数又有多少。通过这种方式可以快速分析系统慢的原因。"),t("code",[s._v("Histogram")]),s._v(" 和 "),t("code",[s._v("Summary")]),s._v(" 都是为了能够解决这样的问题存在的，通过 "),t("code",[s._v("Histogram")]),s._v(" 和"),t("code",[s._v("Summary")]),s._v(" 类型的监控指标，我们可以快速了解监控样本的分布情况。")]),s._v(" "),t("p",[s._v("例如，指标 "),t("code",[s._v("prometheus_tsdb_wal_fsync_duration_seconds")]),s._v(" 的指标类型为 Summary。它记录了 Prometheus Server 中 "),t("code",[s._v("wal_fsync")]),s._v(" 的处理时间，通过访问 Prometheus Server 的 "),t("code",[s._v("/metrics")]),s._v(" 地址，可以获取到以下监控样本数据：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# TYPE prometheus_tsdb_wal_fsync_duration_seconds summary")]),s._v("\nprometheus_tsdb_wal_fsync_duration_seconds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("quantile"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.5"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.012352463")]),s._v("\nprometheus_tsdb_wal_fsync_duration_seconds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("quantile"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.9"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.014458005")]),s._v("\nprometheus_tsdb_wal_fsync_duration_seconds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("quantile"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.99"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.017316173")]),s._v("\nprometheus_tsdb_wal_fsync_duration_seconds_sum "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.888716127000002")]),s._v("\nprometheus_tsdb_wal_fsync_duration_seconds_count "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("216")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("从上面的样本中可以得知当前 Prometheus Server 进行 "),t("code",[s._v("wal_fsync")]),s._v(" 操作的总次数为216次，耗时2.888716127000002s。其中中位数（quantile=0.5）的耗时为0.012352463，9分位数（quantile=0.9）的耗时为0.014458005s。")]),s._v(" "),t("p",[s._v("在 Prometheus Server 自身返回的样本数据中，我们还能找到类型为 Histogram 的监控指标"),t("code",[s._v("prometheus_tsdb_compaction_chunk_range_seconds_bucket")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# HELP prometheus_tsdb_compaction_chunk_range_seconds Final time range of chunks on their first compaction")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# TYPE prometheus_tsdb_compaction_chunk_range_seconds histogram")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"100"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("71")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"400"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("71")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1600"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("71")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"6400"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("71")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"25600"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("405")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"102400"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25690")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"409600"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("71863")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.6384e+06"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("115928")]),s._v("\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"6.5536e+06"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".5687892e+07\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2.62144e+07"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".5687896e+07\nprometheus_tsdb_compaction_chunk_range_seconds_bucket"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("le"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"+Inf"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".5687896e+07\nprometheus_tsdb_compaction_chunk_range_seconds_sum "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".7728699529576e+13\nprometheus_tsdb_compaction_chunk_range_seconds_count "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".5687896e+07\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("与 "),t("code",[s._v("Summary")]),s._v(" 类型的指标相似之处在于 "),t("code",[s._v("Histogram")]),s._v(" 类型的样本同样会反应当前指标的记录的总数(以 "),t("code",[s._v("_count")]),s._v(" 作为后缀)以及其值的总量（以 "),t("code",[s._v("_sum")]),s._v(" 作为后缀）。不同在于 "),t("code",[s._v("Histogram")]),s._v(" 指标直接反应了在不同区间内样本的个数，区间通过标签 le 进行定义。")]),s._v(" "),t("h2",{attrs:{id:"_4、查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、查询"}},[s._v("#")]),s._v(" 4、查询")]),s._v(" "),t("p",[s._v("当 Prometheus 采集到监控指标样本数据后，我们就可以通过 PromQL 对监控样本数据进行查询。基本的 Prometheus 查询的结构非常类似于一个 metric 指标，以指标名称开始。")]),s._v(" "),t("h3",{attrs:{id:"_4-1、查询结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、查询结构"}},[s._v("#")]),s._v(" 4.1、查询结构")]),s._v(" "),t("p",[s._v("比如只查询 "),t("code",[s._v("node_cpu_seconds_total")]),s._v(" 则会返回所有采集节点的所有类型的 CPU 时长数据，当然如果数据量特别特别大的时候，直接在 Grafana 执行该查询操作的时候，则可能导致浏览器崩溃，因为它同时需要渲染的数据点太多。")]),s._v(" "),t("p",[s._v("接下来，可以使用标签进行过滤查询，标签过滤器支持4种运算符：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("=")]),s._v(" 等于")]),s._v(" "),t("li",[t("code",[s._v("!=")]),s._v(" 不等于")]),s._v(" "),t("li",[t("code",[s._v("=~")]),s._v(" 匹配正则表达式")]),s._v(" "),t("li",[t("code",[s._v("!~")]),s._v(" 与正则表达式不匹配")])]),s._v(" "),t("p",[s._v("标签过滤器都位于指标名称后面的"),t("code",[s._v("{}")]),s._v("内，比如过滤 master 节点的 CPU 使用数据可用如下查询语句：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('node_cpu_seconds_total{instance="ydzs-master"}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("正则匹配")]),s._v(" "),t("p",[s._v("PromQL 查询语句中的正则表达式匹配使用 "),t("a",{attrs:{href:"https://github.com/google/re2/wiki/Syntax",target:"_blank",rel:"noopener noreferrer"}},[s._v("RE2语法"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("此外我们还可以使用多个标签过滤器，以逗号分隔。多个标签过滤器之间是 "),t("code",[s._v("AND")]),s._v(" 的关系，所以使用多个标签进行过滤，返回的指标数据必须和所有标签过滤器匹配。")]),s._v(" "),t("p",[s._v("例如如下查询语句将返回所有以 "),t("code",[s._v("ydzs-")]),s._v("为前缀的节点的并且是 "),t("code",[s._v("idle")]),s._v(" 模式下面的节点 CPU 使用时长指标：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('node_cpu_seconds_total{instance=~"ydzs-.*", mode="idle"}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_4-2、范围选择器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2、范围选择器"}},[s._v("#")]),s._v(" 4.2、范围选择器")]),s._v(" "),t("p",[s._v("我们可以通过将[时间范围选择器https://prometheus.io/docs/prometheus/latest/querying/basics/#range-vector-selectors附加到查询语句中，指定为每个返回的区间向量样本值中提取多长的时间范围。每个时间戳的值都是按时间倒序记录在时间序列中的，该值是从时间范围内的时间戳获取的对应的值。")]),s._v(" "),t("p",[s._v("时间范围通过数字来表示，单位可以使用以下其中之一的时间单位：")]),s._v(" "),t("ul",[t("li",[s._v("s - 秒")]),s._v(" "),t("li",[s._v("m - 分钟")]),s._v(" "),t("li",[s._v("h - 小时")]),s._v(" "),t("li",[s._v("d - 天")]),s._v(" "),t("li",[s._v("w - 周")]),s._v(" "),t("li",[s._v("y - 年")])]),s._v(" "),t("p",[s._v("比如 "),t("code",[s._v('node_cpu_seconds_total{instance="ydzs-master", mode="idle"}')]),s._v(" 这个查询语句，如果添加上 "),t("code",[s._v("[1m]")]),s._v(" 这个时间范围选择器，则我们可以得到如下所示的信息：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323153107.png",alt:"node cpu range vector"}})]),s._v(" "),t("p",[s._v("可以看到上面的两个时间序列都有4个值，这是因为我们 Prometheus 中配置的抓取间隔是15秒，所以，我们从图中的 "),t("code",[s._v("@")]),s._v(" 符号后面的时间戳可以看出，它们之间的间隔基本上就是15秒。")]),s._v(" "),t("p",[s._v("但是现在如果我们在 Prometheus 的页面中查询上面的语句，然后切换到 "),t("code",[s._v("Graph")]),s._v(" 选项卡的时候，则会出现如下所示的错误信息： "),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323154950.png",alt:"node cpu range vector graph"}})]),s._v(" "),t("p",[s._v("这是因为现在每一个时间序列中都有多个时间戳多个值，所以没办法渲染，必须是标量或者瞬时向量才可以绘制图形。")]),s._v(" "),t("p",[s._v("不过通常区间向量都会应用一个函数后变成可以绘制的瞬时向量，Prometheus 中对瞬时向量和区间向量有很多操作的"),t("a",{attrs:{href:"https://prometheus.io/docs/prometheus/latest/querying/functions",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数"),t("OutboundLink")],1),s._v("，不过对于区间向量来说最常用的函数并不多，使用最频繁的有如下几个函数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("rate()")]),s._v(": 计算整个时间范围内区间向量中时间序列的每秒平均增长率")]),s._v(" "),t("li",[t("code",[s._v("irate()")]),s._v(": 仅使用时间范围中的"),t("strong",[s._v("最后两个数据点")]),s._v("来计算区间向量中时间序列的每秒平均增长率，"),t("code",[s._v("irate")]),s._v(" 只能用于绘制快速变化的序列，在长期趋势分析或者告警中更推荐使用 "),t("code",[s._v("rate")]),s._v(" 函数")]),s._v(" "),t("li",[t("code",[s._v("increase()")]),s._v(": 计算所选时间范围内时间序列的增量，它基本上是速率乘以时间范围选择器中的秒数")])]),s._v(" "),t("p",[s._v("我们选择的时间范围持续时间将确定图表的粒度，比如，持续时间 "),t("code",[s._v("[1m]")]),s._v(" 会给出非常尖锐的图表，从而很难直观的显示出趋势来，看起来像这样：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323160520.png",alt:"1m node cpu rate"}})]),s._v(" "),t("p",[s._v("对于一个一小时的图表，"),t("code",[s._v("[5m]")]),s._v(" 显示的图表看上去要更加合适一些，更能显示出 CPU 使用的趋势：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323160708.png",alt:"5m node cpu rate"}})]),s._v(" "),t("p",[s._v("对于更长的时间跨度，可能需要设置更长的持续时间，以便消除波峰并获得更多的长期趋势图表。我们可以简单比较持续时间为"),t("code",[s._v("[5m]")]),s._v(" 和 "),t("code",[s._v("[30m]")]),s._v(" 的一天内的图表：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323160924.png",alt:"5m node cpu rate of 1d"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323161001.png",alt:"30m node cpu rate of 1d"}})]),s._v(" "),t("p",[s._v("有的时候可能想要查看5分钟前或者昨天一天的区间内的样本数据，这个时候我们就需要用到位移操作了，位移操作的关键字是 "),t("code",[s._v("offset")]),s._v("，比如我们可以查询30分钟之前的 master 节点 CPU 的空闲指标数据：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('node_cpu_seconds_total{instance="ydzs-master", mode="idle"} offset 30m\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("需要注意的是 "),t("code",[s._v("offset")]),s._v(" 关键字需要紧跟在选择器("),t("code",[s._v("{}")]),s._v(")后面。")]),s._v(" "),t("p",[s._v("同样位移操作也适用于区间向量，比如我们要查询昨天的前5分钟的 CPU 空闲增长率：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200324092731.png",alt:"5m node cpu rate of 1d offset"}})]),s._v(" "),t("h3",{attrs:{id:"_4-3、关联查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3、关联查询"}},[s._v("#")]),s._v(" 4.3、关联查询")]),s._v(" "),t("p",[s._v("Prometheus 没有提供类似与 SQL 语句的关联查询的概念，但是我们可以通过在 Prometheus 上使用 "),t("a",{attrs:{href:"https://prometheus.io/docs/prometheus/latest/querying/operators/",target:"_blank",rel:"noopener noreferrer"}},[s._v("运算符"),t("OutboundLink")],1),s._v(" 来组合时间序列，可以应用于多个时间序列或标量值的常规计算、比较和逻辑运算。")]),s._v(" "),t("p",[s._v("注意")]),s._v(" "),t("p",[s._v("如果将运算符应用于两个瞬时向量，则它将仅应用于匹配的时间序列，当且仅当时间序列具有完全相同的标签集的时候，才认为是匹配的。当表达式左侧的每个序列和右侧的一个序列完全匹配的时候，在序列上使用这些运算符才可以实现一对一匹配。")]),s._v(" "),t("p",[s._v("比如如下的两个瞬时向量：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('node_cpu_seconds_total{instance="ydzs-master", cpu="0", mode="idle"}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("和")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('node_cpu_seconds_total{instance="ydzs-node1", cpu="0", mode="idle"}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果我们对这两个序列做加法运算来尝试获取 master 和 node1 节点的总的空闲 CPU 时长，则不会返回任何内容了：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323165746.png",alt:"add operator"}})]),s._v(" "),t("p",[s._v("这是因为这两个时间序列没有完全匹配标签。我们可以使用 "),t("code",[s._v("on")]),s._v(" 关键字指定只希望在 "),t("code",[s._v("mode")]),s._v(" 标签上进行匹配，就可以计算出结果来：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/20200323165823.png",alt:"add operator on"}})]),s._v(" "),t("p",[s._v("需要注意的是新的瞬时向量包含单个序列，其中仅包含 "),t("code",[s._v("on")]),s._v(" 关键字中指定的标签。")]),s._v(" "),t("p",[s._v("不过在 Prometheus 中还有很多 "),t("a",{attrs:{href:"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators",target:"_blank",rel:"noopener noreferrer"}},[s._v("聚合操作"),t("OutboundLink")],1),s._v("，所以，如果我们真的想要获取节点的 CPU 总时长，我们完全不用这么操作，使用 "),t("code",[s._v("sum")]),s._v(" 操作要简单得多：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('sum(node_cpu_seconds_total{mode="idle"}) by (instance)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("on")]),s._v(" 关键字只能用于一对一的匹配中，如果是多对一或者一对多的匹配情况下，就不行了，比如我们可以通过 "),t("a",{attrs:{href:"https://github.com/kubernetes/kube-state-metrics",target:"_blank",rel:"noopener noreferrer"}},[s._v("kube-state-metrics"),t("OutboundLink")],1),s._v(" 这个工具来获取 Kubernetes 集群的各种状态指标，包括 Pod 的基本信息，比如我们执行如下所示的查询语句：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('container_cpu_user_seconds_total{namespace="kube-system"} * on (pod) kube_pod_info\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("就会出现 "),t("code",[s._v("Error executing query: multiple matches for labels: many-to-one matching must be explicit (group_left/group_right)")]),s._v(" 这样的错误提示，这是因为左侧的序列数据在同一个 Pod 上面有可能会有多条时间序列，所以不能简单通过 "),t("code",[s._v("on (pod)")]),s._v(" 来进行查询。")]),s._v(" "),t("p",[s._v("要解决这个问题，我们可以使用 "),t("code",[s._v("group_left")]),s._v(" 或"),t("code",[s._v("group_right")]),s._v(" 关键字。这两个关键字将匹配分别转换为"),t("strong",[s._v("多对一")]),s._v("或"),t("strong",[s._v("一对多")]),s._v("匹配。左侧和右侧表示基数较高的一侧。因此，"),t("code",[s._v("group_left")]),s._v(" 意味着左侧的多个序列可以与右侧的单个序列匹配。结果是，返回的瞬时向量包含基数较高的一侧的所有标签，即使它们与右侧的任何标签都不匹配。")]),s._v(" "),t("p",[s._v("例如如下所示的查询语句就可以正常获取到结果，而且获取到的时间序列数据包含所有的标签:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('container_cpu_user_seconds_total{namespace="kube-system"} * on (pod) group_left() kube_pod_info\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_4-4、瞬时向量和标量结合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4、瞬时向量和标量结合"}},[s._v("#")]),s._v(" 4.4、瞬时向量和标量结合")]),s._v(" "),t("p",[s._v("此外我们还可以将瞬时向量和标量值相结合，这个很简单，就是简单的数学计算，比如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('node_cpu_seconds_total{instance="ydzs-master"} * 10\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("会为瞬时向量中每个序列的每个值都剩以10。这对于计算比率和百分比得时候非常有用。")]),s._v(" "),t("ul",[t("li",[s._v("除了 "),t("code",[s._v("*")]),s._v(" 之外，其他常用的算数运算符当然也支持："),t("code",[s._v("+")]),s._v("、"),t("code",[s._v("-")]),s._v("、"),t("code",[s._v("*")]),s._v("、"),t("code",[s._v("/")]),s._v("、"),t("code",[s._v("%")]),s._v("、"),t("code",[s._v("^")]),s._v("。")]),s._v(" "),t("li",[s._v("还有其他的比较运算符："),t("code",[s._v("==")]),s._v("、"),t("code",[s._v("!=")]),s._v("、"),t("code",[s._v(">")]),s._v("、"),t("code",[s._v("<")]),s._v("、"),t("code",[s._v(">=")]),s._v("、"),t("code",[s._v("<=")]),s._v("。")]),s._v(" "),t("li",[s._v("逻辑运算符："),t("code",[s._v("and")]),s._v("、"),t("code",[s._v("or")]),s._v("、"),t("code",[s._v("unless")]),s._v("，不过逻辑运算符只能用于瞬时向量之间。")])]),s._v(" "),t("p",[s._v("除了这些关于 "),t("code",[s._v("PromQL")]),s._v(" 最基本的知识点之外，还有很多相关的使用方法，可以参考官网相关介绍：")]),s._v(" "),t("p",[s._v("https://prometheus.io/docs/prometheus/latest/querying/basics/")])])}),[],!1,null,null,null);e.default=n.exports}}]);