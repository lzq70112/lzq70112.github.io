(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{663:function(t,s,e){"use strict";e.r(s);var a=e(20),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("本文参考学习于："),e("a",{attrs:{href:"https://blog.csdn.net/songguangfan/article/details/121475879?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165456373916782388040270%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=165456373916782388040270&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-121475879-null-null.article_score_rank_blog&utm_term=docker&spm=1018.2226.3001.4450",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文带你彻底搞懂Docker中的cgroup"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_1、前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、前言"}},[t._v("#")]),t._v(" 1、前言")]),t._v(" "),e("p",[t._v("进程在系统中使用CPU、内存、磁盘等计算资源或者存储资源还是比较随心所欲的，我们希望对进程资源利用进行限制，对进程资源的使用进行追踪。这就让cgroup的出现成为了可能，它用来统一将进程进行分组，并在分组的基础上对进程进行监控和资源控制管理。")]),t._v(" "),e("h2",{attrs:{id:"_2、什么是cgroup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、什么是cgroup"}},[t._v("#")]),t._v(" 2、什么是cgroup")]),t._v(" "),e("p",[t._v("Linux CGroup(Linux Contral Group)，它其实是Linux内核的一个功能，它是Linux下的一种将进程按组进行管理的机制。最开始是由Google工程师Paul Menage和Rohit Seth于2006年发起的，最早起名叫进程容器。在2007之后随着容器得提出，为了避免混乱重命名为cgroup，并且被合并到了内核2.6.24版本中去了。\n在用户层看来，cgroup技术就是把系统中的所有进程组织成一颗一颗独立的树，每棵树都包含系统的所有进程，树的每个节点是一个进程组，而每颗树又和一个或者多个subsystem关联。树主要用来将进程进行分组，而subsystem用来对这些组进行操作。")]),t._v(" "),e("p",[t._v("cgroup的组成\ncgroup主要包含以下两个部分")]),t._v(" "),e("p",[t._v('subsystem： 一个subsystem就是一个内核模块，它被关联到一颗cgroup树之后，就会在树节点进行具体的操作。subsystem经常被称作"resource controller"，因为它主要被用来调度或者限制每个进程组的资源，但是这个说法不完全准确，因为有时我们将进程分组只是为了做一些监控，观察一下他们的状态，比如perf_event subsystem。')]),t._v(" "),e("p",[t._v("hierarchy：一个hierarchy可以理解为一棵cgroup树，树的每个节点就是一个进程组，每棵树都会与多个subsystem关联。在一颗树里面，会包含Linux系统中的所有进程，但每个进程只能属于一个节点（进程组）。系统中可以有很多颗cgroup树，每棵树都和不同的subsystem关联，一个进程可以属于多颗树，即一个进程可以属于多个进程组，这些进程组和不同的subsystem关联。\n可以通过查看/proc/cgroup目录查看当前系统支持哪些subsystem关联")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206070932959.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("第一列：表示subsystem名")]),t._v(" "),e("p",[t._v("第二列：表示关联到的cgroup树的ID，如果多个subsystem关联到同一颗cgroup树，那么它们的这个字段将一样。比如图中的cpuset、cpu和cpuacct。")]),t._v(" "),e("p",[t._v("第三列：表示subsystem所关联的cgroup树中进程组的个数，即树上节点的个数。")]),t._v(" "),e("h2",{attrs:{id:"_3、cgroup提供的功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、cgroup提供的功能"}},[t._v("#")]),t._v(" 3、cgroup提供的功能")]),t._v(" "),e("p",[t._v("它提供了如下功能")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Resource limitation:资源使用限制")])]),t._v(" "),e("li",[e("p",[t._v("Prioritization:优先级控制")])]),t._v(" "),e("li",[e("p",[t._v("Accounting:一些审计或者统计")])]),t._v(" "),e("li",[e("p",[t._v("Control:挂起进程，恢复执行进程")])])]),t._v(" "),e("p",[t._v("一般我们可以用cgroup做以下事情")]),t._v(" "),e("ul",[e("li",[t._v("隔离一个进程集合（比如MySQL的所有进程），限定他们所占用的资源，比如绑定的核限制")]),t._v(" "),e("li",[t._v("为这组进程分配内存")]),t._v(" "),e("li",[t._v("为这组进程的分配足够的带宽及进行存储限制")]),t._v(" "),e("li",[t._v("限制访问某些设备")])]),t._v(" "),e("p",[t._v("cgroup在Linux中表现为一个文件系统，运行如下命令")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071003725.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("mount成功后，可以看到，在"),e("code",[t._v("/sys/fs")]),t._v("下有个cgroup目录,这个目录下有很多子系统。比如cpu、cpuset、blkio等。\n然后在"),e("code",[t._v("/sys/fs/cgroup/cpu")]),t._v("目录下建个子目录test,这个时候会发现在该目录下多了很多文件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071004999.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("h2",{attrs:{id:"_4、限制cgroup中的cpu"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、限制cgroup中的cpu"}},[t._v("#")]),t._v(" 4、限制cgroup中的CPU")]),t._v(" "),e("p",[t._v("在cgroup里面，跟CPU相关的子系统有cpusets、cpuacct和cpu。\n其中cpuset主要用于设置CPU的亲和性，可以限制cgroup中的进程只能在指定的CPU上运行，或者不能在指定的CPU上运行，同时cpuset还能设置内存的亲和性。cpuacct包含当前cgroup所使用的CPU的统计信息。这里我们只说以下cpu。")]),t._v(" "),e("p",[t._v("然后我们在/sys/fs/cgroup/cpu下创建一个子group, 该目录下文件列表")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071005555.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("cpu.cfs_period_us用来配置时间周期长度，cpu.cfs_quota_us用来配置时间周期长度，cpu.cfs_quota_us用来配置当前cgroup在设置的周期长度内所能使用的CPU时间数，两个文件配合起来设置CPU的使用上限。两个文件的单位都是微秒（us），cpu.cfs_period_us的取值范围为1毫秒（ms）到1秒（s），cpu.cfs_quota_us的取值大于1ms即可。\n下面来举个例子讲解如何使用cpu限制\n假如我们写了一个死循环")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071005179.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("运行起来用top查看下占用率达到了100%")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071007331.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("我们执行如下命令对cfs_quota_us进行设置")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /sys/fs/cgroup/cpu/test/cpu.cfs_quota_us\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这条命令表示把进程的CPU利用率下降20%，然后把进程PID加入到cgroup中\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071008572.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("再执行top可以看到cpu利用率下降了")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071011961.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("h2",{attrs:{id:"_5、限制cgroup中的内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、限制cgroup中的内存"}},[t._v("#")]),t._v(" 5、限制cgroup中的内存")]),t._v(" "),e("p",[t._v("代码如果有bug，比如内存泄露等会榨干系统内存，让其它程序由于分配不了足够的内存而出现异常，如果系统配置了交换分区，会导致系统大量使用交换分区，从而系统运行很慢。\n而cgroup对进程内存控制主要控制如下：")]),t._v(" "),e("ul",[e("li",[t._v("限制cgroup中所有进程使用的内存总量")]),t._v(" "),e("li",[t._v("限制cgroup中所有进程使用的物理内容+swap交换总量")]),t._v(" "),e("li",[t._v("限制cgroup中所有进程所能使用的内核内存总量及其它一些内核资源(CONFIG_MEMCG_KMEM)。")])]),t._v(" "),e("p",[t._v("这里限制内核内存就是限制cgroup当前所使用的内核资源，包括当前进程的内核占空间，socket所占用的内存空间等。当内存吃紧时，可以阻止当前cgroup继续创建进程以及向内核申请分配更多的内核资源。\n下面通过一个例子带大家理解cgroup做内存控制的")]),t._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdlib>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("CHUNK_SIZE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")])])]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nullptr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CHUNK_SIZE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("nullptr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CHUNK_SIZE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%u]-- [%d]MB is allocated "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br")])]),e("p",[t._v("首先，在/sys/fs/cgroup/memory下创建一个子目录即创建了一个子cgroup，比如这里我们创建了一个test目录")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" /sys/fs/cgroup/memory/test\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("test目录包含以下文件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071013422.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("每个文件的作用大概介绍下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("文件")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("cgroup.event_control")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于eventfd的接口")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.usage_in_bytes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示当前已用的内存")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.limit_in_bytes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置/显示当前限制的内存额度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.failcnt")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示内存使用量达到限制值的次数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.max_usage_in_bytes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("历史内存最大使用量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.soft_limit_in_bytes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置/显示当前限制的内存软额度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.stat")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示当前cgroup的内存使用情况")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.use_hierarchy")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置/显示是否将子cgroup的内存使用情况统计到当前cgroup里面")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.force_empty")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("触发系统立即尽可能的回收当前cgroup中可以回收的内存")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.pressure_level")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置内存压力的通知事件，配合cgroup.event_control一起使用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.swappiness")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置和显示当前的swappiness")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.move_charge_at_immigrate")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.oom_control")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置/显示oom controls相关的配置")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("memory.numa_stat")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示numa相关的内存")])])])]),t._v(" "),e("p",[t._v("然后通过写文件"),e("code",[t._v("memory.limit_in_bytes")]),t._v("来设置限额。这里设置5M的限制，如下图所示")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071021084.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("把上面示例进程加入这个cgroup，如下图所示")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071021679.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("为了避免受swap空间的影响，设置swappiness为0来禁止当前cgroup使用swap，如下图所示\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071021684.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("当物理内存达到上限后，系统的默认行为是kill掉cgroup中继续申请内存的进程。那么怎么控制这个行为呢？那就是配置memory.oom_control。这个文件里面包含了一个控制是否为当前cgroup启动OOM-killer的标识。如果写0到这个文件，将启动OOM-killer，当内核无法给进程分配足够的内存时，将会直接kill掉该进程；如果写1到这个文件，表示不启动OOM-killer，当内核无法给进程分配足够的内存时，将会暂停该进程直到有空余的内存之后再继续运行；同时，memory.oom_control还包含一个只读的under_oom字段，用来表示当前是否已经进入oom状态，也即是否有进程被暂停了。还有一个只读的killed_oom字段，用来表示当前是否有进程被kill掉了。")]),t._v(" "),e("h2",{attrs:{id:"_6、限制cgoup的进程数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、限制cgoup的进程数"}},[t._v("#")]),t._v(" 6、限制cgoup的进程数")]),t._v(" "),e("p",[t._v("cgroup中有一个subsystem叫pids，功能是限制cgroup及其所有子孙cgroup里面能创建的总的task数量。这里的task指通过fork和clone函数创建的进程，由于clone函数也能创建线程，所以这里的task也包含线程。\n之前cgroup树是已经挂载好的，这里就直接创建子cgroup，取名为test。命令如下图所示")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071023031.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("再来看看test目录下的文件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071024682.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("其中pids.current表示当前cgroup和其所有孙子cgroup现有的总的进程数量。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071024411.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("pids.max 当前cgroup和其所有孙子cgroup所允许创建的最大进程数量。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071024679.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("下面我们做个实验，将pids.max设置为1")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071024655.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("然后将当前bash进程加入到该cgroup中")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071025166.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("随便运行一个命令，由于在当前窗口pids.current已经等于pids.max了，所以创建进程失败")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071025387.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("当前cgroup中的pids.current和pids.max代表了当前cgroup及所有子孙cgroup的所有进程，所以子孙cgroup中的"),e("code",[t._v("pids.max")]),t._v("大小不能超过父cgroup中的大小，如果超过了会怎么样？\n我们把"),e("code",[t._v("pids.max")]),t._v("设置为3")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071025244.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("当前进程数为2")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071025219.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("重新打开一个shell窗口，创建个孙子cgroup，将其中的pids.max设置为5")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071026356.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("讲当前shell的bash进程写入croup.procs")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071026942.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("回到原来的shell窗口随便执行一条命令可以看到执行失败")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202206071026889.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("可以看到，子cgroup中的进程数不仅受制与自己的pids.max，还受制于祖先cgroup的"),e("code",[t._v("pids.max")])])])}),[],!1,null,null,null);s.default=r.exports}}]);