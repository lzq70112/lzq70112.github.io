(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{599:function(s,a,e){"use strict";e.r(a);var t=e(20),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("调试容器化工作负载和 Pod 是每位使用 Kubernetes 的开发人员和 DevOps 工程师的日常任务。通常情况下，我们简单地使用 kubectl logs 或者 kubectl describe pod 便足以找到问题所在，但有时候，一些问题会特别难查。这种情况下，大家可能会尝试使用 kubectl exec，但有时候这样也还不行，因为 Distroless 等容器甚至不允许通过 SSH 进入 shell。那么，如果以上所有方法都失败了，我们要怎么办？")]),s._v(" "),e("p",[s._v("Kubernetes v1.18 版本新增的 kubectl debug 命令，允许调试正在运行的 pod。它会将名为 EphemeralContainer（临时容器）的特殊容器注入到问题 Pod 中，让我们查看并排除故障。")]),s._v(" "),e("p",[s._v("临时容器其实是 Pod 中的子资源，类似普通 container。但与普通容器不同的是，临时容器不用于构建应用程序，而是用于检查。我们不会在创建 Pod 时定义它们，而使用特殊的 API 将其注入到运的行 Pod 中，来运行命令并检查 Pod 环境。除了这些不同，临时容器还缺少一些基本容器的字段，例如 ports、resources。")]),s._v(" "),e("h2",{attrs:{id:"_1、开启临时容器功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、开启临时容器功能"}},[s._v("#")]),s._v(" 1、"),e("strong",[s._v("开启临时容器功能")])]),s._v(" "),e("p",[s._v("虽然临时容器是作为 Kubernetes 核心的 Pod 规范的一部分，但很多人可能还没有听说过。这是因为临时容器处于早期 Alpha 阶段，这意味着默认情况下不启用。Alpha 阶段的资源和功能可能会出现重大变化，或者在 Kubernetes 的某个未来版本中被完全删除。因此，要使用它们必须在 kubelet 中使用 Feature Gate（特性门控）显式启用。")]),s._v(" "),e("h3",{attrs:{id:"_1-1、在已经运行的-kubernetes-集群中开启临时容器功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、在已经运行的-kubernetes-集群中开启临时容器功能"}},[s._v("#")]),s._v(" 1.1、"),e("strong",[s._v("在已经运行的 Kubernetes 集群中开启临时容器功能")])]),s._v(" "),e("p",[s._v("编辑 /etc/manifests/kube-apiserver.yaml 文件，添加 "),e("code",[s._v("EphemeralContainers=true")]),s._v(" 开启临时容器功能，如果要开启多个特性门控功能用 "),e("code",[s._v(",")]),s._v(" 隔开：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("feature"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("gates"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("DynamicKubeletConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("EphemeralContainers"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202205241523019.png",alt:"img"}})]),s._v(" "),e("h3",{attrs:{id:"_1-2、在初始化-kubernetes-集群时开启临时容器功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、在初始化-kubernetes-集群时开启临时容器功能"}},[s._v("#")]),s._v(" 1.2、"),e("strong",[s._v("在初始化 Kubernetes 集群时开启临时容器功能")])]),s._v(" "),e("p",[s._v("如果想在 kubeadm 初始化 Kubernetes 集群时开启临时容器功能，则修改 kubeadm 配置文件：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("# init"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("k8s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("yaml \n"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" kubeadm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("k8s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("io"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("v1beta2\n"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("kind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ClusterConfiguration\n"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("kubernetesVersion")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" v1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("apiServer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("extraArgs")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    feature"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("gates"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" EphemeralContainers"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("然后通过 kubeadm init 初始化 Kubernetes 集群：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("kubeadm init "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("config init"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("k8s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("yaml \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"_2、通过-pod-副本调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、通过-pod-副本调试"}},[s._v("#")]),s._v(" 2、"),e("strong",[s._v("通过 Pod 副本调试")])]),s._v(" "),e("p",[s._v("当故障容器不包括必要的调试工具甚至 shell 时，我们可以使用 "),e("code",[s._v("--copy-to")]),s._v(" 指令出一个新的 Pod 副本，然后通过 "),e("code",[s._v("--share-processes")]),s._v(" 指令使 Pod 中的容器之间共享进程命名空间。进程共享的一个问题是它不能应用于现有的 Pod，因此我们必须创建一个新 Pod。")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动普通 Nginx Pod")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" kubectl run nginx-app --image"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx --restart"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Never\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动临时容器，使用 Process Sharing（进程共享）来使用注入的临时容器检查 Pod 的原有容器。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nginx-app 是普通 Pod 的名字，nginx-app-debug 是用于调试的 Pod 的名字，nginx-container-debug 是用于调试的 Pod 里的容器名，这里可以省略")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" kubectl debug -it nginx-app -n nginx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--image"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("busybox --share-processes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--copy-to"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx-app-debug "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--container"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx-container-debug\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在临时容器可以看到 Nginx 容器的进程和文件")]),s._v("\n/ "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ps ax")]),s._v("\nPID   "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("     TIME  COMMAND\n    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 /pause\n    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" root      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: master process nginx -g daemon off"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("36")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("39")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("41")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: worker process\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" root      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v(" root      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" ax\n/ "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /proc/6/root/etc/nginx/conf.d/default.conf")]),s._v("\nserver "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    listen       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    listen  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("::"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(":80"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    server_name  localhost"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#access_log  /var/log/nginx/host.access.log  main;")]),s._v("\n\n    location / "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        root   /usr/share/nginx/html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        index  index.html index.htm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("p",[s._v("上面的代码表明，通过进程共享，我们可以看到 Pod 中另一个容器内的所有内容，包括其进程和文件，这对于调试来说非常方便。如果我们从另一个终端列出正在运行的 Pod，我们将看到以下内容：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("❯ kubectl get pod\nNAME                           READY   STATUS    RESTARTS   AGE\nnginx-app                       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1     Running   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          3m23s\nnginx-app-debug                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("/2     Running   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          3m10s\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这就是我们在原始应用程序 Pod 上的新调试 Pod。与原始容器相比，它有 2 个容器，因为它还包括临时容器。此外，如果想在任何时候验证 Pod 中是否允许进程共享，那么可以运行：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("❯ kubectl get pod some-app-debug -o json  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" jq .spec.shareProcessNamespace\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_2-1、在创建-pod-副本时改变-pod-运行的命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、在创建-pod-副本时改变-pod-运行的命令"}},[s._v("#")]),s._v(" 2.1、"),e("strong",[s._v("在创建 Pod 副本时改变 Pod 运行的命令")])]),s._v(" "),e("p",[s._v("有时更改容器的命令很有用，例如调试崩溃的容器。为了模拟应用崩溃的场景，使用 kubectl run 命令创建一个立即退出的容器：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("kubectl run --image"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("busybox myapp -- "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("使用 kubectl describe pod myapp 命令，可以看到容器崩溃了：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lzq70112/images/blog/202205241541626.png",alt:"img"}})]),s._v(" "),e("p",[s._v("此时可以使用 kubectl debug 命令创建该 Pod 的一个副本， 在该副本中将命令改变为交互式 shell：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里 --container 不能省略")]),s._v("\n❯ kubectl debug myapp -it --copy-to"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("myapp-debug --container"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("myapp -- "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("\nIf you don't see a "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" prompt, try pressing enter.\n/ "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("现在就有了一个可以执行类似检查文件系统路径或者手动运行容器命令的交互式 shell。")]),s._v(" "),e("h3",{attrs:{id:"_2-2、创建-pod-副本时更改容器镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、创建-pod-副本时更改容器镜像"}},[s._v("#")]),s._v(" 2.2、创建 Pod 副本时更改容器镜像")]),s._v(" "),e("p",[s._v("在某些情况下，你可能想从正常生产容器镜像中把行为异常的 Pod 改变为包含调试版本或者附加应用的镜像。")]),s._v(" "),e("p",[s._v("下面的例子，用 kubectl run 创建一个 Pod：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("kubectl run myapp --image"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("busybox --restart"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Never -- "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" 1d\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("现在可以使用 kubectl debug 创建一个副本 并改变容器镜像为 ubuntu：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("kubectl debug myapp --copy-to"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("myapp-debug --set-image"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("myapp"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ubuntu\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("--set-image=myapp=ubuntu 指令中 myapp 是容器名，ubuntu 是新的容器镜像。")]),s._v(" "),e("h3",{attrs:{id:"_2-3、调试集群节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、调试集群节点"}},[s._v("#")]),s._v(" 2.3、"),e("strong",[s._v("调试集群节点")])]),s._v(" "),e("p",[s._v("kubectl debug 允许通过创建 Pod 来调试节点，该 Pod 将在指定节点上运行，节点的根文件系统安装在 /root 目录中。我们甚至可以用 chroot 访问主机二进制文件，这本质上充当了节点的 SSH 连接：")]),s._v(" "),e("p",[s._v("查看 Kubernetes 集群的节点，我们准备调试 k8s-calico-master 节点。")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("❯ kubectl get nodes\nNAME                STATUS   ROLES    AGE   VERSION\nk8s-calico-master   Ready    master   7d    v1.17.3\nk8s-calico-node01   Ready    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   7d    v1.17.3\nk8s-calico-node02   Ready    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   7d    v1.17.3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("使用 node/... 作为参数显式运行 kubectl debug 以访问我们集群的节点。")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("❯ kubectl debug node/k8s-calico-master  -it --image"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ubuntu\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("当连接到Pod后，使用 chroot /host 突破 chroot，并完全进入主机。可以获取到节点完全的权限，查看到节点所有的文件，甚至重启节点。")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("root@k8s-calico-master:/etc"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# chroot /host")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看节点文件")]),s._v("\nsh-4.2"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cd /etc/kubernetes/manifests/")]),s._v("\nsh-4.2"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ls")]),s._v("\netcd.yaml  kube-apiserver.yaml kube-controller-manager.yaml  kube-scheduler.yaml\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);