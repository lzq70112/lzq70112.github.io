(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{624:function(s,a,t){"use strict";t.r(a);var e=t(20),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1、job的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、job的概念"}},[s._v("#")]),s._v(" 1、job的概念")]),s._v(" "),t("p",[t("code",[s._v("Job")]),s._v("，我们在日常的工作中经常都会遇到一些需要进行批量数据处理和分析的需求，当然也会有按时间来进行调度的工作，在我们的 Kubernetes 集群中为我们提供了 "),t("code",[s._v("Job")]),s._v(" 和 "),t("code",[s._v("CronJob")]),s._v(" 两种资源对象来应对我们的这种需求。")]),s._v(" "),t("p",[t("code",[s._v("Job")]),s._v(" 负责处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束。而"),t("code",[s._v("CronJob")]),s._v(" 则就是在 "),t("code",[s._v("Job")]),s._v(" 上加上了时间调度。")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" batch/v1\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Job\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" job"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("demo\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("template")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restartPolicy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" OnFailure\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" counter\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" busybox\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("command")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bin/sh"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"for i in 9 8 7 6 5 4 3 2 1; do echo $i; done"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("我们可以看到 "),t("code",[s._v("Job")]),s._v(" 中也是一个 Pod 模板，和之前的 Deployment、StatefulSet 之类的是一致的，只是 Pod 中的容器要求是一个任务，而不是一个常驻前台的进程了，因为需要退出，")]),s._v(" "),t("p",[s._v("另外值得注意的是 "),t("code",[s._v("Job")]),s._v(" 的 "),t("code",[s._v("RestartPolicy")]),s._v(" 仅支持 "),t("code",[s._v("Never")]),s._v(" 和 "),t("code",[s._v("OnFailure")]),s._v(" 两种，不支持 "),t("code",[s._v("Always")]),s._v("，我们知道 "),t("code",[s._v("Job")]),s._v(" 就相当于来执行一个批处理任务，执行完就结束了，如果支持 "),t("code",[s._v("Always")]),s._v(" 的话是不是就陷入了死循环了？")]),s._v(" "),t("p",[s._v("直接创建这个 Job 对象：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("kubectl apply -f ingress.yml \nkubectl get jobs -A\nkubectl logs job-demo-wlpqp \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[s._v("9\n8\n7\n6\n5\n4\n3\n2\n1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("如果的任务执行失败了，如果定义了")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("restartPolicy=OnFailure")]),s._v(": 那么任务在执行失败后 Job 控制器就会不断地尝试创建一个新 Pod，当然，这个尝试肯定不能无限进行下去。我们可以通过 Job 对象的 "),t("code",[s._v("spec.backoffLimit")]),s._v(" 字段来定义重试次数，另外需要注意的是 Job 控制器重新创建 Pod 的间隔是呈指数增加的，即下一次重新创建 Pod 的动作会分别发生在 10s、20s、40s… 后。")]),s._v(" "),t("li",[t("code",[s._v("restartPolicy=Never")]),s._v(":那么任务执行失败后，Job 控制器就不会去尝试创建新的 Pod 了，它会不断地尝试重启 Pod 里的容器。")])]),s._v(" "),t("h2",{attrs:{id:"_2、job的回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、job的回收"}},[s._v("#")]),s._v(" 2、job的回收")]),s._v(" "),t("p",[s._v("上面我们这里的 Job 任务对应的 Pod 在运行结束后，会变成 "),t("code",[s._v("Completed")]),s._v(" 状态，但是如果执行任务的 Pod 因为某种原因一直没有结束怎么办呢？同样我们可以在 Job 对象中通过设置字段 "),t("code",[s._v("spec.activeDeadlineSeconds")]),s._v(" 来限制任务运行的最长时间，比如：")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("activeDeadlineSeconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("那么当我们的任务 Pod 运行超过了 100s 后，这个 Job 的所有 Pod 都会被终止，并且， Pod 的终止原因会变成 "),t("code",[s._v("DeadlineExceeded")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"_3、cronjob"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、cronjob"}},[s._v("#")]),s._v(" 3、CronJob")]),s._v(" "),t("p",[t("code",[s._v("CronJob")]),s._v(" 其实就是在 "),t("code",[s._v("Job")]),s._v(" 的基础上加上了时间调度，我们可以在给定的时间点运行一个任务，也可以周期性地在给定时间点运行。这个实际上和我们 Linux 中的 "),t("code",[s._v("crontab")]),s._v(" 就非常类似了。")]),s._v(" "),t("p",[s._v("一个 "),t("code",[s._v("CronJob")]),s._v(" 对象其实就对应中 "),t("code",[s._v("crontab")]),s._v(" 文件中的一行，它根据配置的时间格式周期性地运行一个"),t("code",[s._v("Job")]),s._v("，格式和 "),t("code",[s._v("crontab")]),s._v(" 也是一样的。")]),s._v(" "),t("p",[s._v("crontab 的格式为："),t("code",[s._v("分 时 日 月 星期 要运行的命令")]),s._v(" 。")]),s._v(" "),t("ul",[t("li",[s._v("第1列分钟0～59")]),s._v(" "),t("li",[s._v("第2列小时0～23）")]),s._v(" "),t("li",[s._v("第3列日1～31")]),s._v(" "),t("li",[s._v("第4列月1～12")]),s._v(" "),t("li",[s._v("第5列星期0～7（0和7表示星期天）")]),s._v(" "),t("li",[s._v("第6列要运行的命令")])]),s._v(" "),t("p",[s._v("现在，我们用 "),t("code",[s._v("CronJob")]),s._v(" 来管理我们上面的 "),t("code",[s._v("Job")]),s._v(" 任务，定义如下所示的资源清单：(cronjob-demo.yaml)")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" batch/v1beta1\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" CronJob\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" cronjob"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("demo\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("schedule")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*/1 * * * *"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("jobTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("template")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restartPolicy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" OnFailure\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" hello\n            "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" busybox\n            "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bin/sh"')]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"for i in 9 8 7 6 5 4 3 2 1; do echo $i; done"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("这里的 Kind 变成了 "),t("code",[s._v("CronJob")]),s._v(" 了，要注意的是"),t("code",[s._v(".spec.schedule")]),s._v("字段是必须填写的，用来指定任务运行的周期，格式就和 "),t("code",[s._v("crontab")]),s._v(" 一样，另外一个字段是"),t("code",[s._v(".spec.jobTemplate")]),s._v(", 用来指定需要运行的任务，格式当然和 "),t("code",[s._v("Job")]),s._v(" 是一致的。还有一些值得我们关注的字段 "),t("code",[s._v(".spec.successfulJobsHistoryLimit")]),s._v("(默认为3) 和 "),t("code",[s._v(".spec.failedJobsHistoryLimit")]),s._v("(默认为1)，表示历史限制，是可选的字段，指定可以保留多少完成和失败的 "),t("code",[s._v("Job")]),s._v("。然而，当运行一个 "),t("code",[s._v("CronJob")]),s._v(" 时，"),t("code",[s._v("Job")]),s._v(" 可以很快就堆积很多，所以一般推荐设置这两个字段的值。如果设置限制的值为 0，那么相关类型的 "),t("code",[s._v("Job")]),s._v(" 完成后将不会被保留。")]),s._v(" "),t("p",[s._v("我们直接新建上面的资源对象：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v(" kubectl create -f cronjob-demo.yaml\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后可以查看对应的 Cronjob 资源对象：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("kubectl get cronjob\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("NAME           SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE\ncronjob-demo   */1 * * * *   False     0        22s             60s\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("稍微等一会儿查看可以发现多了几个 Job 资源对象，这个就是因为上面我们设置的 CronJob 资源对象，每1分钟执行一个新的 Job：")]),s._v(" "),t("p",[t("code",[s._v("kubectl get jobs")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("NAME                      COMPLETIONS   DURATION   AGE\ncronjob-demo-1635575340   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1           3s         64s\ncronjob-demo-1635575400   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1           3s         4s\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("kubectl get pods")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("NAME                      READY   STATUS      RESTARTS   AGE\ncronjob-demo-1574147340-ksd5x   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/1     Completed           "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          3m7s\ncronjob-demo-1574147400-pts94   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/1     Completed           "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          2m7s\ncronjob-demo-1574147460-t5hcd   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/1     Completed           "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          67s\ncronjob-demo-1574147520-vmjfr   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/1     ContainerCreating   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          7s\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这个就是 CronJob 的基本用法，一旦不再需要 CronJob，我们可以使用 kubectl 命令删除它：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v(" kubectl delete cronjob cronjob-demo\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("不过需要注意的是这将会终止正在创建的 Job，但是运行中的 Job 将不会被终止，不会删除 Job 或 它们的 Pod。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);