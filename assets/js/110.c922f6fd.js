(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{578:function(n,e,s){"use strict";s.r(e);var a=s(20),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"_1、默认的scheduler的调度过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、默认的scheduler的调度过程"}},[n._v("#")]),n._v(" 1、默认的scheduler的调度过程")]),n._v(" "),s("ol",[s("li",[n._v("预选策略：从所有节点当中选择基本符合选择条件的节点。")]),n._v(" "),s("li",[n._v("优选函数：在众多符合基本条件的节点中使用优选函数，计算节点各自的得分，通过比较进行排序。")]),n._v(" "),s("li",[n._v("从最高得分的节点中随机选择出一个作为Pod运行的节点。")])]),n._v(" "),s("p",[n._v("可以通过自己的预设来影响预选、优选过程，从而实现符合我们期望的调度结果。")]),n._v(" "),s("p",[s("strong",[n._v("影响调度方式：")])]),n._v(" "),s("ul",[s("li",[n._v("节点选择器：NodeSelector，甚至可以设置nodename来选择节点本身。")]),n._v(" "),s("li",[n._v("亲和性调度：NodeAffinity（节点亲和性）、podAffinity（Pod亲和性）、PodAntiAffinity（Pod的反亲和性）")]),n._v(" "),s("li",[n._v("污点和容忍度：Taint、toleration")])]),n._v(" "),s("h2",{attrs:{id:"_2、节点选择器-nodeselector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、节点选择器-nodeselector"}},[n._v("#")]),n._v(" 2、节点选择器：NodeSelector")]),n._v(" "),s("p",[n._v("如果我们期望把Pod调度到某一个特定的节点上，可以通过设定Pod.spec.nodeName给定node名称实现。我们可以给一部分node打上特有标签，在pod.spec.nodeSelector中匹配这些标签。可以极大的缩小预选范围。\n给node添加标签：\nkubectl label nodes NODE_NAME key1=value1...keyN=valueN")]),n._v(" "),s("p",[n._v("如：在node01上打上标签为app=frontend，而在pod上设置NodeSelector为这个标签，则此Pod只能运行在存在此标签的节点上。\n若没有node存在此标签，则Pod无法被调度，即为Pending状态")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("# cat nodeSelector.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\n  labels:\n    app: my-pod\n\nspec:\n  containers:\n  - name: my-pod\n    image: nginx\n    ports:\n    - name: http\n      containerPort: 80\n  nodeSelector:\n    disk: ssd  #如果nodeSelector中指定的标签节点都没有，该pod就会处于Pending状态（预选失败）\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("h2",{attrs:{id:"_3、亲和性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、亲和性"}},[n._v("#")]),n._v(" 3、亲和性")]),n._v(" "),s("p",[n._v("requiredDuringSchedulingIgnoredDuringExecution 硬亲和性 必须满足亲和性。\npreferredDuringSchedulingIgnoredDuringExecution 软亲和性 能满足最好，不满足也没关系。")]),n._v(" "),s("h3",{attrs:{id:"_3-1、硬亲和性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、硬亲和性"}},[n._v("#")]),n._v(" 3.1、硬亲和性")]),n._v(" "),s("p",[n._v("matchExpressions : 匹配表达式,这个标签可以指定一段，例如pod中定义的key为zone，operator为In(包含那些)，values为 foo和bar。就是在node节点中包含foo和bar的标签中调度\nmatchFields : 匹配字段 和上面的意思 不过他可以不定义标签值，可以定义")]),n._v(" "),s("p",[n._v("硬亲和性 必须满足亲和性。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: zone\n                operator: In\n                values:\n                - foo\n                - bbb\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("h3",{attrs:{id:"_3-2、软亲和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、软亲和"}},[n._v("#")]),n._v(" 3.2、软亲和")]),n._v(" "),s("p",[n._v("软亲和性，有标签先调度")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    spec:\n      affinity:\n        nodeAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - preference:\n              matchExpressions:\n              - key: zone\n                operator: In\n                values:\n                - foo-no\n                - bbb-no\n            weight: 60 #匹配相应nodeSelectorTerm相关联的权重,1-100\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h3",{attrs:{id:"_3-3、pod间的亲和与互斥-反亲和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、pod间的亲和与互斥-反亲和"}},[n._v("#")]),n._v(" 3.3、pod间的亲和与互斥（反亲和）")]),n._v(" "),s("p",[n._v("Pod亲和性场景，我们的k8s集群的节点分布在不同的区域或者不同的机房，当服务A和服务B要求部署在同一个区域或者同一机房的时候，我们就需要亲和性调度了。")]),n._v(" "),s("p",[n._v("labelSelector : 选择跟那组Pod亲和\nnamespaces : 选择哪个命名空间\ntopologyKey : 指定节点上的哪个键")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("  spec:\n      affinity:\n        podAffinity:\n          #preferredDuringSchedulingIgnoredDuringExecution:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app #标签键名,上面pod定义\n                operator: In  #In表示在\n                values:\n                - nginx #app标签的值\n            topologyKey: kubernetes.io/hostname #kubernetes.io/hostname的值一样代表pod处于同一位置     \n#此pod应位于同一位置（亲和力）或不位于同一位置（反亲和力）,与pods匹配指定名称空间中的labelSelector，其中co-located定义为在标签值为的节点上运行,key topologyKey匹配任何选定pod的任何节点在跑\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("反亲和")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("   spec:\n      affinity:\n        #podAffinity:\n        podAntiAffinity:  #就改了这里\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app #标签键名,上面pod定义\n                operator: In  #In表示在\n                values:\n                - nginx #app1标签的值\n            topologyKey: kubernetes.io/hostname #kubernetes.io/hostname的值一样代表pod处于同一位置     #此pod应位于同一位置（亲和力）或不位于同一位置（反亲和力）,与pods匹配指定名称空间中的labelSelector，其中co-located定义为在标签值为的节点上运行,key topologyKey匹配任何选定pod的任何节点在跑\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("h2",{attrs:{id:"_4、污点调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、污点调度"}},[n._v("#")]),n._v(" 4、污点调度")]),n._v(" "),s("p",[n._v("taints and tolerations 允许将某个节点做标记，以使得所有的pod都不会被调度到该节点上。但是如果某个pod明确制定了 tolerates 则可以正常调度到被标记的节点上。")]),n._v(" "),s("p",[n._v("# 可以使用命令行为 Node 节点添加 Taints：")]),n._v(" "),s("p",[n._v("kubectl taint nodes node1 key=value:NoSchedule")]),n._v(" "),s("p",[s("strong",[n._v("operator****可以定义为：")]),n._v("\nEqual：表示key是否等于value，默认\nExists：表示key是否存在，此时无需定义value")]),n._v(" "),s("p",[s("strong",[n._v("tain")]),n._v(" "),s("strong",[n._v("的 effect")]),n._v(" "),s("strong",[n._v("定义对 Pod")]),n._v(" "),s("strong",[n._v("排斥效果:")]),n._v("\nNoSchedule：仅影响调度过程，对现存的Pod对象不产生影响；\nNoExecute：既影响调度过程，也影响显著的Pod对象；不容忍的Pod对象将被驱逐 就是已经部署的pod也会被 调度\nPreferNoSchedule: 表示尽量不调度")]),n._v(" "),s("p",[s("strong",[n._v("容忍")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('      tolerations:\n      - key: "node-type"  # #之前定义的污点名\n        operator: "Equal" #Exists,如果node-type污点在，就能容忍，Equal精确\n        value: "production"  #污点值\n        effect: "NoSchedule"  #效果\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);